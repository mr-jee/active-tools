import subprocess
import json

def run_powershell_command(powershell_script, expect_json=True):
    try:
        result = subprocess.run(["powershell", "-Command", powershell_script], capture_output=True, text=True, check=True)

        if expect_json:
            try:
                # Try parsing the output as JSON
                return json.loads(result.stdout)
            except json.JSONDecodeError:
                # Return None if JSON parsing fails
                print("Error decoding JSON. Output:", result.stdout)
                return None
        else:
            # Return the raw text output
            return result.stdout
    except subprocess.CalledProcessError as e:
        # Handle PowerShell errors
        print("PowerShell Error:", e)
        return None

employee_id = "1256"
samaccountname = "mali1"
new_password = "Mcsa2016"

# Define PowerShell command to retrieve user information by Employee ID
fetch_user_by_employeeid = f'''
$employee_id = "{employee_id}"
Get-ADUser -Filter "EmployeeID -eq $employee_id" -Properties sAMAccountName,EmployeeId,DisplayName,Mail,Manager,Title,"msDS-UserPasswordExpiryTimeComputed" |
    Select-Object sAMAccountName, EmployeeId, DisplayName, Mail, Manager, Title, "msDS-UserPasswordExpiryTimeComputed" |
    ConvertTo-Json
'''

# Define PowerShell command to retrieve user information by SamAccountName
fetch_user_by_samaccountname = f'''
$samaccountname = "{samaccountname}"
Get-ADUser -Filter {{sAMAccountName -eq $samaccountname}} -Properties sAMAccountName,EmployeeId,DisplayName,Mail,Title,Manager,physicalDeliveryOfficeName,"msDS-UserPasswordExpiryTimeComputed" |
    Select-Object sAMAccountName, EmployeeId, DisplayName, Mail, Title, Manager, physicalDeliveryOfficeName, "msDS-UserPasswordExpiryTimeComputed" |
    ConvertTo-Json
'''

# change_password_command = f'''
# $samaccountname = "{samaccountname}"
# $new_pass = ConvertTo-SecureString -AsPlainText "{new_password}" -Force
# try {{
#     Set-ADAccountPassword -Identity $samaccountname -NewPassword $new_pass -Reset
#     Write-Host "Password of $samaccountname changed."
# }} catch {{
#     Write-Host "Password change failed. $_"
# }}
# '''


def run_change_password_command(samaccountname, new_password):
    # Define PowerShell command to change the user password
    change_password_command = f'''
    $user = Get-ADUser -Filter {{sAMAccountName -eq "{samaccountname}"}} -Properties SamAccountName
    $new_pass = "{new_password}"
    if ($user -ne $null) {{
        # Set the new password for the user
        Set-ADAccountPassword -Identity $user -NewPassword $new_pass -Reset
        Write-Output "PasswordChangeSuccess"
    }} else {{
        Write-Output "UserNotFound"
    }}
    '''

    # Run the PowerShell command to change the password
    result_change_password = run_powershell_command(change_password_command, expect_json=False)

    # Check the result and print a corresponding Python message
    if "PasswordChangeSuccess" in result_change_password:
        print("Password change successful.")
    elif "UserNotFound" in result_change_password:
        print("User not found.")
    else:
        print("Password change failed.")

# Example usage
samaccountname = "mali1"
new_password = "Mcsa2016"
run_change_password_command(samaccountname, new_password)

result_employeeid = run_powershell_command(fetch_user_by_employeeid)

# Process the result
if result_employeeid:
    # Extract user information from the result dictionary
    sam_account_name = result_employeeid.get("sAMAccountName", "")
    display_name = result_employeeid.get("DisplayName", "")
    employeeid = result_employeeid.get("EmployeeId", "")
    mail = result_employeeid.get("Mail", "")
    title = result_employeeid.get("Title", "")
    manager = result_employeeid.get("Manager", "")
    password_expiry_time = result_employeeid.get("msDS-UserPasswordExpiryTimeComputed", "")

    # Print or use the variables as needed
    print("SamAccountName:", sam_account_name)
    print("DisplayName:", display_name)
    print("Employee ID: ", employeeid)
    print("Email:", mail)
    print("Title:", title)
    print("Manager:", manager)
    print("Password Expiry Time:", password_expiry_time)

    # # Run the PowerShell command to change the password
    # result_change_password = run_powershell_command(change_password_command, expect_json=False)
    #
    # # Check if the password change was successful
    # if "Password of" in result_change_password:
    #     print(result_change_password)
    # else:
    #     print("Password change failed.")
else:
    print("User not found.")
